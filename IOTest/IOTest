#!/bin/bash -eu
##
## IOTest -- Unified script for fio and ddr tests
##
## Specifications for what jobs to run are entered via jobfiles
## named on the command line (w/ one jobspec per line; '#' denote
## comments to the end-of-line) or via literal jobspecs on the
## command line prefixed by '+'.
##    
## Job specifications are of the form:
##    
##   DDR Test Spec = ddr:$FileSz:$BlkSz:$BorD
##   Fio Test Spec = fio:$IOType:$FileSz:$BlkSz:$BorD:$Engine:$IODepth
##    
## where
##    
##   IOType  = read | randread | write | randwrite
##   FileSz  = nnM | dev ; typical: ( 2048M 1024M 512M 256M )
##   BlkSz   = nnk ; typical: ( 1024k 256k 64k 16k 4k )
##   BorD    = buffered | direct
##   Engine  = sync | libaio
##   IODepth = nn ; typical: ( 64 32 16 4 1 )
##    
## The number of concurrent jobs to test is specified
## by the variable NJ defined near the end of the script;
## typical: ( 1 2 3 4 5 6 7 8 10 12 14 16 18 20 22 24 )
##
## The results for a specified run are appended to a file
## with the same name as the specification w/ '.out' appended
## to the end.  (A specification may have an optional '.out'
## suffix that will be ignored, allowing additional runs of
## an existing spec just by naming the current output file.)

# --- Short shell functions ---------------------------------------------------

info()	{ echo "==" "${@}" ; }
trace()	{ echo "++" "${@}" ; eval "$@" ; }
die()	{ echo -e "!!" "${@:-Fatal Error}" ; exit 1 ; }
debug()	{ if [[ $debug ]] ; then echo "%%" "${@}" ; fi }

# --- Embedded perl aggregator script -----------------------------------------
#
# If $1 is "AGGREGATE", run this here-doc perl script. 
# This allows us to avoid having to have it in an auxiliary file.

if [ "${1:-}" = AGGREGATE ] ; then
  shift
  perl -- - "$@" <<-'EOD'
	#!/usr/bin/perl
	use warnings ;
	use strict ;
	my $th = 0 ;
	my $flow = 0 ;
	while (<>)
	  {
	  next unless /(\d+) bytes .* ([.\d]+) s,/ ;
	  print ">> $_" ; 
	  my $bytes = $1 ;
	  my $seconds = $2 ;
	  $th++ ; $flow += $bytes / 1000/1000/1000 / $seconds ;
	  }
	printf "Aggregate %d Th %.2f GBps\n\n", $th, $flow ;
	EOD
  exit
fi

# --- Parse command line ------------------------------------------------------
#
# Parse command line flags for debug, dryrun and verbose.
# Command arguments are either individual jobspecs (prefixed w/ '+')
# or jobspec-files containing one jobspec per line (w/ '#' comments).
# Collect all jobspecs into the JobSpecs[] array variable.

UsageExit() { cat<<EOD ; exit 1
Usage: $(basename $0) [-nvqd] +jobspec|jobfile ...
EOD
}

debug=
dryrun=
verbose=1
while getopts "nqvd" opt ; do
  case $opt in
    n) dryrun=1 ;;
    q) verbose=0 ;;
    v) verbose=$((verbose+1)) ;;
    d) debug=$((debug+1)) ;;
   \?) UsageExit ;;
  esac
done ; shift $((OPTIND-1))
[[ $# > 0 ]] || UsageExit

debug debug:   [$debug]
debug dryrun:  [$dryrun]
debug verbose: [$verbose]
debug args: ; for arg in "$@" ; do debug "  [$arg]" ; done

for arg in "$@" ; do
  if [[ $arg =~ ^\+(.+) ]] ; then
    spec="${BASH_REMATCH[1]}"
    debug SpecArg: $spec
    JobSpecs+=($spec)
  else
    file="$arg"
    debug FileArg: $file
    [[ -f $file ]] || die "File not found: $file"
    [[ -r $file ]] || die "File not readable: $file"
    while read spec ; do JobSpecs+=(${spec/\#*/}) ; done <$file
  fi
done

debug JobSpecs: ; for js in "${JobSpecs[@]}" ; do debug "  [$js]" ; done

# --- Locate test data directory and device -----------------------------------
#
# There must be a symbolic link DD w/in the current directory pointing
# to the actual directory where the test data files will be created.
# From this, extract the underlying device via findmnt.

DDir=DD
[ -L $DDir -a -d $DDir ] || die No data directory link $DDir found
DDev=$(findmnt -no source -T $DDir)

# --- Setup temp dir ----------------------------------------------------------
#
# Set up a temporary directory to hold intermediate files

TMPDIR=/run/user/$UID/ReadTest.$$
mkdir -p $TMPDIR || die Cannot mkdir $TMPDIR
trap "rm -rf $TMPDIR ; exit" 0 1 2 3 15

# --- Function to run an fio trial set ----------------------------------------

RunFio()
  {
  spec=${1:--}		# test spec
  arg=(${spec//:/ })	# split on ':'

  IOType=${arg[1]:--}	# 'read' | 'randread' | 'write' | 'randwrite'
  FileSz=${arg[2]:--}	# file-size: nM
  BlkSz=${arg[3]:--}	# block-size: nk
  BorD=${arg[4]:--}	# 'buffered' | 'direct'
  Engine=${arg[5]:--}	# 'sync' | 'libaio'
  IODepth=${arg[6]:-1}	# iodepth: n

  DieBadSpec() { echo !! Bad Spec: $spec ; die $@ ; }

  [[ $IOType  =~ ^(rand)?(read|write)$ ]]  || DieBadSpec Bad IOType: $IOType
  [[ $FileSz  =~ ^([0-9]+M|dev)$ ]]	   || DieBadSpec Bad FileSz: $FileSz
  [[ $BlkSz   =~ ^[0-9]+k$ ]]		   || DieBadSpec Bad BlkSz: $BlkSz
  [[ $BorD    =~ ^(buffered|direct)$ ]]	   || DieBadSpec Bad Buf/Dir: $BorD
  [[ $Engine  =~ ^(sync|libaio)$ ]]	   || DieBadSpec Bad Engine: $Engine
  [[ $IODepth =~ ^[0-9]+$ ]]		   || DieBadSpec Bad IODepth: $IODepth

  if [[ $IOType =~ write && $FileSz =~ dev ]] ; then return ; fi
  if [[ $Engine == sync && $IODepth != 1 ]] ; then return ; fi
  Label=fio:$IOType:$FileSz:$BlkSz:$BorD:$Engine:$IODepth
  Label=${Label//sync:1/sync}
  JobFile=$TMPDIR/$Label
  OutFile=$Label.out

  cat <<-EOD >$JobFile
	## === JobFile: $Label ===
	[global]
	  create_only=\${CREATE_ONLY} ;
	  randrepeat=0		; vary random numbers across runs
	  time_based		; loop until runtime
	  runtime=120s		; limit runtime
	  ramp_time=4s		; ramp-up time
	  group_reporting	; report by job groups
	  ioengine=$Engine
	  iodepth=$IODepth
	  rw=$IOType
	  bs=$BlkSz
	  $BorD=1
	EOD

  for nj in ${NJ[@]} ; do

    if [ $FileSz = "dev" ] ; then
      cat <<-EOD >>$JobFile
	[$Label::$nj]
	  stonewall
	  numjobs=$nj
	  filename=$DDev
	EOD

    else
      cat <<-EOD >>$JobFile
	[$Label::$nj]
	  stonewall
	  numjobs=$nj
	  filename_format=fio:$FileSz:$nj.\$jobnum.\$filenum
	  directory=$DDir/
	  size=$FileSz
	EOD

    fi

  done

  info Run $Label
  if [[ $dryrun ]] ; then
    if (( $verbose >= 2 )) ; then cat $JobFile ; fi
  else
    CREATE_ONLY=1 fio $JobFile --output-format=normal >>$OutFile
    SECONDS=0
    CREATE_ONLY=0 fio $JobFile --output-format=normal,json >>$OutFile
    echo == Elapsed Time: ${SECONDS}s >>$OutFile
  fi
  }

# --- Function to run a ddr trial set -----------------------------------------

RunDDR()
  {
  spec=${1:--}		# test spec
  arg=(${spec//:/ })	# split on ':'

  FileSz=${arg[1]:--}	# file-size: nM
  BlkSz=${arg[2]:--}	# block-size: nk
  BorD=${arg[3]:--}	# 'buffered' | 'direct'

  DieBadSpec() { echo !! Bad Spec: $spec ; die $@ ; }
  [[ $FileSz =~ ^[0-9]+M$ ]]		|| DieBadSpec Bad FileSz: $FileSz
  [[ $BlkSz  =~ ^[0-9]+k$ ]]		|| DieBadSpec Bad BlkSz: $BlkSz
  [[ $BorD   =~ ^(buffered|direct)$ ]]	|| DieBadSpec Bad Buf/Dir: $BorD

  Label=ddr:$FileSz:$BlkSz:$BorD
  OutFile=$Label.out

  info Run $Label

  if [[ $dryrun ]] ; then

    if (( $verbose >= 2 )) ; then
      for nj in ${NJ[@]} ; do
	echo == \
	  $(date +'%F %T') -- \
	  $FileSz File, \
	  $BlkSz Block ${BorD^}, \
	  $nj threads
      done
    fi

  else

    FileList=( $DDir/fio:$FileSz:* )
    tj=0 ; for nj in ${NJ[@]} ; do ((tj=tj+nj)) ; done
    (( ${#FileList[@]} >= $tj )) || die "Insufficient files of length $FileSz!" 

    SECONDS=0

    for nj in ${NJ[@]} ; do

      echo == \
	$(date +'%F %T') -- \
	$FileSz File, \
	$BlkSz Block ${BorD^}, \
	$nj threads \
	>> $OutFile

	sysctl -wq vm.drop_caches=3 ; sleep 2

	RFs=()
	[ $BorD = "direct" ] && IFlags=direct || IFlags=nocache
	for ((Th=1 ; Th<=nj ; Th++)) ; do
	  DF=${FileList[0]} ; FileList=( ${FileList[@]:1} ${FileList[0]} )
	  DD="dd if=$DF bs=$BlkSz iflag=$IFlags of=/dev/null"
	  printf -v RF "$TMPDIR/R%02d" $Th ;
	  echo "++ $DD" >> $OutFile 
	  $DD >& $RF &
	  RFs+=($RF)
	done
	echo "++ wait x$nj" >> $OutFile ; wait
	$0 AGGREGATE ${RFs[@]} >> $OutFile

    done

    echo == Elapsed Time: ${SECONDS}s >>$OutFile

  fi
  }

# --- Process Job Specs -------------------------------------------------------
#
# Process each of the specified job specs.
# Each jobspec can have an appended '.out' which will be ignored.
# This allows simply using the name of an output file to repeat its jobspec.
# Examine the leading term of the job spec and hand off to the proper runner.

NJ=( 1 2 3 4 5 6 7 8 10 12 14 16 18 20 22 24 )

for js in "${JobSpecs[@]}" ; do
  debug JobSpec: [$js]
  js=${js%.out} # drop '.out' suffix so can use filename to repeat a job
  case ${js%%:*} in
    fio) RunFio $js ;;
    ddr) RunDDR $js ;;
    *)   die "Unrecognized test: ${js%%:*}"
  esac
done

exit 0 # ======================================================================
exit 0 # ======================================================================
exit 0 # ======================================================================

Label=fio:$IOType:$FileSz:$BlkSz:$BorD:$Engine:$IODepth
Label=ddr:$FileSz:$BlkSz:$BorD

IT=( read randread )
FS=( 2048M 1024M 512M 256M )
BS=( 1024k 256k 64k 16k 4k )
BD=( buffered direct )
EN=( libaio sync )
IO=( 64 32 16 4 1 )
NJ=( 1 2 3 4 5 6 7 8 10 12 14 16 18 20 22 24 )

