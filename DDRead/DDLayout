#!/bin/bash -eu

info()	{ echo "##" "${@}" ; }
trace()	{ echo "++" "${@}" ; eval "$@" ; }
die()	{ echo "!!" "${@:-Fatal Error}" ; exit 1 ; }

# --- Get NFiles from the command line ----------------------------------------

(( $# == 1 )) || die "Usage: $(basename $0) NFiles"

NFiles=${1}
[[ $NFiles =~ ^([0-9]+)$ ]] || die Bad NFiles: $NFiles
info NFiles: $NFiles

# --- Locate test data directory ----------------------------------------------
#
# There must be a symbolic link DD w/in the current directory pointing
# to the actual directory where the test data files are to be created.

DDir=DD
[ -L $DDir -a -d $DDir ] || die No data directory link $DDir found

# --- Create test data files --------------------------------------------------
#
# Create a set of test data files containing random data from /dev/urandom
# for each of a variety of sizes ranging from 1MiB to 1GiB, each set w/in
# its own subdirectory.  Filename will be $DDir/<LL>/<NNNN> where <LL> is
# the log_2 filesize and <NNNN> is a serial sequence number.
#
# Since we want to try to model the behavior of a typical filesystem
# containing a wide assortment of files of varying sizes, we also create
# additional padding files to *avoid* any file alignment synergies.

MkFile()
  {
  FileNo=$1 # FileNo - file number to create
  [[ $FileNo =~ ^([0-9]+)$ ]] || die Bad FileNo: $FileNo

  FileSzLb=$2 # FileSzLb - log_2 of file size to create
  [[ $FileSzLb =~ ^([0-9]+)$ ]] \
    && (( 20 <= $FileSzLb && $FileSzLb <= 32 )) \
      || die Bad FileSzLb: $FileSzLb
  FileSz=$(( 2**$FileSzLb ))

  printf -v SDir  "$DDir/%02d"       $FileSzLb
  printf -v DFile "$DDir/%02d/%04d"  $FileSzLb $FileNo
  printf -v PFile "$DDir/%02d/.%04d" $FileSzLb $FileNo

  echo -n "** $DFile << RAND[2**$FileSzLb]: "

  if [ -s $DFile ] && [ $(stat -c%s $DFile) -eq $FileSz ] ; then
    echo "OK"
  else
    echo "..."
    mkdir -p $SDir
    PadSz=$((512*(1+RANDOM))) # RANDOM: [0,32K)
    dd if=/dev/urandom of=$PFile bs=64K \
       iflag=count_bytes count=$PadSz conv=fsync status=none
    dd if=/dev/urandom of=$DFile bs=64K \
       iflag=count_bytes count=$FileSz conv=fsync status=none
  fi
  }

for ((i=1 ; i<=$NFiles; ++i)) ; do
for ((SzLb=20 ; SzLb<=30 ; SzLb+=2)) ; do
  MkFile $i $SzLb
done
done

# -----------------------------------------------------------------------------
exit 0 ; # ===================================================================

